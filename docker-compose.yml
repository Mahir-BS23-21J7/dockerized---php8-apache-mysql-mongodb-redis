version: "3.5"

services:

# Main App
  app:
    build:
      args:
        user: dev
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    working_dir: /var/www/html
    ports:
      - "0.0.0.0:8000:80"
    volumes:
      - ./:/var/www/html
    networks:
      - backend

# Rabbit MQ
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit
      - RABBITMQ_DEFAULT_PASS=rabbit
    ports:
      - 0.0.0.0:5672:5672
      - 0.0.0.0:15672:15672
    volumes:
      - vol-rabbitmq:/var/lib/rabbitmq/
    networks:
        - backend       

# Redis      
  redis:
    image: "redis:latest"
    hostname: redis
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "0.0.0.0:6379:6379"
    volumes:
      - vol-redis/:/data
    networks:
      - backend 

# REDIS GUI TOOL / MANAGER      
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - 0.0.0.0:8181:8081
    depends_on:
      - redis
    networks:
      - backend 

# MONGO DB
  db-mongo:
    image: mongo:latest
    container_name: db-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_MONGO_USERNAME-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_MONGO_PASSWORD-admin}
    ports:
      - "0.0.0.0:27017:27017"
    volumes:
      - vol-mongo/:/data/db
    networks:
      - backend  

# MONGOEXPRESS MONGO DB MANAGER / BROWSER
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_MONGODB_AUTH_DATABASE: 'admin'
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_MONGO_USERNAME-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_MONGO_PASSWORD-admin}
      ME_CONFIG_MONGODB_SERVER: db-mongo
      ME_CONFIG_MONGODB_PORT: "27017"
    ports:
      - "0.0.0.0:9081:8081"
    depends_on:
      - db-mongo
    networks:
      - backend  

# MYSQL DB
  db-mysql:
    image: mysql:5.7
    container_name: db-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_MYSQL-laravel_db}
      MYSQL_USER: ${DB_MYSQL_USERNAME-admin}
      MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD-admin}
      MYSQL_ROOT_PASSWORD: ${DB_MYSQL_PASSWORD-root}
      SERVICE_TAGS: db
      SERVICE_NAME: db-mysql
    ports:
      - "0.0.0.0:6033:3306"
    volumes:
      - vol-mysql:/var/lib/mysql
    networks:
      - backend

# PHPMYADMIN MYSQL DB BROWSER / MANAGER
  phpmyadmin:
    depends_on:
      - db-mysql
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - '0.0.0.0:8080:80'
    environment:
      PMA_HOST: db-mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      MYSQL_ROOT_PASSWORD: ${DB_MYSQL_PASSWORD-root}
    networks:
      - backend

# NGINX
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - "5000:80"
  #   volumes:
  #     - ./:/var/www/app
  #     - ./vol-nginx:/etc/nginx/conf.d
  #   networks:
  #     - backend

# NETWORK
networks:
  backend:
    driver: bridge

# Volumes
volumes:
  vol-mysql:
    external: true
    driver: local
  vol-mongo:
    external: true
    driver: local
  vol-redis:    
    external: true
    driver: local
  vol-rabbitmq:    
    external: true
    driver: local

## RUN THE FOLLOWING COMMANDS TO PRE CREATE VOLUMES
#  docker volume create --name=vol-mongo
#  docker volume create --name=vol-mysql
#  docker volume create --name=vol-redis
#  docker volume create --name=vol-rabbitmq
 

